!<arch>
0-isupper.c/    0           0     0     644     43        `
#include "main.h"
int _isupper(int c)
{

}

0-memset.c/     0           0     0     644     70        `
#include "main.h"

char *_memset(char *s, char b, unsigned int n)
{
}
0-strcat.c/     0           0     0     644     381       `
#include "main.h"
/**
 * _strcat - concatenates two strings
 * @dest: pointer to the target string to be concatenated
 * @src: pointer to the string to concatenate
 *
 * Return: dest
 */
char *_strcat(char *dest, char *src)
{
	int i, j;

	for (i = 0; dest[i] != '\0'; i++)
	;

	for (j = 0; src[j] != '\0'; j++)
	{
		dest[i] = src[j];
		i++;
	}
	dest[i] = src[j];
	return (dest);
}

100-atoi.c/     0           0     0     644     42        `
#include "main.h"
int _atoi(char *s)
{

}
1-isdigit.c/    0           0     0     644     214       `
#include "main.h"
/**
 * _isdigit - checks for digit (0 through 9)
 * @c: argument recieved
 * Return: 1 if c is a digit, 0 otherwise
 */
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
		return (1);
	return (0);
}
1-memcpy.c/     0           0     0     644     76        `
#include "main.h"
char *_memcpy(char *dest, char *src, unsigned int n)
{

}
1-strncat.c/    0           0     0     644     317       `
#include "main.h"
/**
 * _strncat - concatenates two strings
 * @dest: destiny
 * @src: source
 * @n: bytes
 *
 * Return: pointer to dest
 */
char *_strncat(char *dest, char *src, int n)
{
int y;

	for (n = 0; dest[n] != '\0'; n++)
	for (y = 0; src[y] != '\0'; y++)
	{
		dest[n] = src[y];
		n++;
	}
	return (dest);
}

2-strchr.c/     0           0     0     644     53        `
#include "main.h"
char *_strchr(char *s, char c)
{
}

2-strlen.c/     0           0     0     644     227       `
#include "main.h"
/**
 * _strlen - returs the length of a string
 * @s: pointer to adress of string
 * Return: string length
 */
int _strlen(char *s)
{
	int count = 0;

	for (; s[count] != '\0'; count++)
		;
	return (count);
}

2-strncpy.c/    0           0     0     644     67        `
#include "main.h"
char *_strncpy(char *dest, char *src, int n)
{
}

3-islower.c/    0           0     0     644     241       `
#include "main.h"
/**
 * _islower - function that checks for lowercase character
 * @c: received characters
 * Return: 1 if c is lowercase, 0 otherwise
 */
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
		return (1);
	else
		return (0);
}

3-puts.c/       0           0     0     644     231       `
#include "main.h"

/**
 *_puts - function that prints a string, followed by a new line, to stdout.
 *@str: string
 */

void _puts(char *str)
{
	int i;

	for (i = 0; str[i] != '\0'; i++)
	{
		_putchar(str[i]);
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     55        `
#include "main.h"
int _strcmp(char *s1, char *s2)
{

}

3-strspn.c/     0           0     0     644     67        `
#include "main.h"
unsigned int _strspn(char *s, char *accept)
{

}

4-isalpha.c/    0           0     0     644     288       `
#include "main.h"
/**
 * _isalpha - function that checks for alphabetic character
 * @c: argument received
 * Return: 1 if c is a letter, lowercase or uppercase, 0 otherwise
 */
int _isalpha(int c)
{
	if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))
		return (1);
	else
		return (0);
}
4-strpbrk.c/    0           0     0     644     61        `
#include "main.h"
char *_strpbrk(char *s, char *accept)
{

}

5-strstr.c/     0           0     0     644     67        `
#include "main.h"
char *_strstr(char *haystack, char *needle)
{

}

6-abs.c/        0           0     0     644     304       `
#include "main.h"
/**
 * _abs - computes the absolute value of an integer
 * @i: is a integer number recieved
 * Return: less than 0 absolute value, greater than 0 the number, otherwise 0
 */
int _abs(int i)
{
	if (i < 0)
	{
		i = (-1) * i;
		return (i);
	}
	else if (i > 0)
		return (i);
	return (0);
}
9-strcpy.c/     0           0     0     644     355       `
#include "main.h"
/**
 * *_strcpy - copies string pointed to by src to buffer pointed to by dest
 * @dest: the pointer to a string
 * @src: the pointer to a buffer
 * Return: the value of the pointer to dest.
 */
char *_strcpy(char *dest, char *src)
{
	int i = 0;

	for (; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';
	return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

